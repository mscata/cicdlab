networks:
  default:
    name: cicdlab

volumes:
  artifactsrepo_data: {}
  ciserver_data: {}
  dbadmin_data: {}
  codescan_data: {}
  dbserver_data: {}
  projectadmin_data: {}
  scmserver_data: {}

#  proxy:
#    image: nginx
#    volumes:
#      - ./nginx.conf:/etc/nginx/conf.d/default.conf
#    ports:
#      - 80:80
  
services:
  artifactsrepo:
    container_name: cicdlab-artifactsrepo
    hostname: artifactsrepo
    image: sonatype/nexus3:latest
    environment:
      - NEXUS_CONTEXT=nexus
      - NEXUS_SECURITY_INITIAL_PASSWORD=password
    volumes:
      - ./setup:/setup
      - artifactsrepo_data:/nexus-data
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8081/nexus/service/rest/v1/status"]
      retries: 20
      interval: 1m
      start_period: 2m
    ports:
      - 8081:8081
    deploy:
      resources:
        limits:
          memory: 4gb

  ciserver:
    depends_on:
      socat:
        condition: service_started
      artifactsrepo:
        condition: service_healthy
      scmserver:
        condition: service_healthy
    container_name: cicdlab-ciserver
    hostname: ciserver
    image: mscata/cicdlabs-ciserver
    environment:
      DOCKER_HOST: socat:2375
      CASC_JENKINS_CONFIG: /setup/jenkins/jenkins-config.yaml
      JENKINS_JAVA_OPTS: -Djenkins.install.runSetupWizard=false
      JENKINS_OPTS: --prefix=/jenkins
    ports:
      - 8080:8080
      - 50000:50000
    volumes:
      - ciserver_data:/var/jenkins_home
      - //var/run/docker.sock:/var/run/docker.sock
      - ./setup:/setup
#      - ./setup/jenkins/users:/var/jenkins_home/users
### Uncomment the following section to make sure the
### plugins are always updated automatically, at the
### expense of a few more minutes of startup time
#    command:
#      - /bin/bash
#      - -c
#      - |
#        echo "Downloading/updating plugins..."
#        jenkins-plugin-cli --plugin-file /setup/jenkins/jenkins-plugins.txt --verbose --skip-failed-plugins
#        echo "Starting Jenkins..."
#        /usr/local/bin/jenkins.sh
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 2gb
    healthcheck:
      test: ["CMD", "curl", "-Ifs", "http://localhost:8080/jenkins/login"]
      retries: 10
      interval: 1m
      start_period: 2m

  codescan:
    depends_on:
      dbserver:
        condition: service_healthy
    container_name: cicdlab-codescan
    hostname: codescan
    image: sonarqube:lts-community
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://dbserver:5432/postgres?currentSchema=sonar
      SONAR_JDBC_USERNAME: postgres
      SONAR_JDBC_PASSWORD: password
      SONAR_WEB_CONTEXT: sonar
    ports:
      - "9000:9000"
    volumes:
      - codescan_data:/opt/sonarqube
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 2gb

  dbadmin:
    depends_on:
      dbserver:
        condition: service_healthy
    container_name: cicdlab-dbadmin
    hostname: dbadmin
    image: mscata/cicdlabs-dbadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@cicdlabs.org
      PGADMIN_DEFAULT_PASSWORD: password
      PGADMIN_CONFIG_ENABlE_PSQL: 'True'
      PGADMIN_CONFIG_MAX_LOGIN_ATTEMPTS: 1000
      PGADMIN_CONFIG_CONFIG_DATABASE_URI: '''postgresql://postgres:password@cicdlab-dbserver:5432/postgres?options=-csearch_path=pgadmin'''
    ports:
      - 5050:80
    volumes:
      - ./setup:/setup
      - dbadmin_data:/var/lib/pgadmin
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256m

  dbserver:
    container_name: cicdlab-dbserver
    hostname: dbserver
    image: mscata/cicdlabs-dbserver
    environment:
      PGDATA: /var/lib/postgresql/data
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - 5432:5432
    volumes:
      - dbserver_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "psql", "-U", "postgres", "postgresql://postgres:password@cicdlab-dbserver:5432/postgres",
             "-c", "select * from information_schema.schemata"]
      retries: 10
      start_period: 2m
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 256m

  labsetup:
    depends_on:
      artifactsrepo:
        condition: service_healthy
      ciserver:
        condition: service_healthy
    container_name: cicdlab-labsetup
    hostname: labsetup
    image: alpine
    volumes:
      - ./setup:/setup
    command:
      - /bin/sh
      - -c
      - |
        apk add curl bash
        echo "Running setup scripts for the CI/CD lab..."
        /setup/nexus/setup.sh
        /setup/gitea/setup.sh
        /setup/jenkins/setup.sh
        echo "End of setup."
        echo "This container will shut down now."
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256m

#  projectadmin:
#    container_name: cicdlab-projectadmin
#    hostname: projectadmin
#    image: redmine
#    environment:
#      - RAILS_ENV=production
#      - REDMINE_DB_POSTGRES=dbserver
#      - REDMINE_DB_USERNAME=postgres
#      - REDMINE_DB_PASSWORD=password
#      - REDMINE_LANG=en_GB
#    volumes:
#      - projectadmin_data:/usr/src/redmine
#      - ./setup/redmine/database.yml:/usr/src/redmine/config/database.yml
#    healthcheck:
#      test: ["CMD", "curl", "http://localhost:3001"]
#      retries: 20
#      interval: 1m
#      start_period: 1m
#    ports:
#      - 3001:3001
#    deploy:
#      resources:
#        limits:
#          memory: 2gb

  scmserver:
    depends_on:
      dbserver:
        condition: service_healthy
    container_name: cicdlab-scmserver
    hostname: scmserver
    image: mscata/cicdlabs-scmserver
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - GITEA__database__DB_TYPE=postgres
      - GITEA__database__HOST=dbserver:5432
      - GITEA__database__NAME=public
      - GITEA__database__SCHEMA=gitea
      - GITEA__database__USER=postgres
      - GITEA__database__PASSWD=password
    volumes:
      - ./setup:/setup
      - ./data/scmserver:/data
      - ./setup/gitea/gitea-app.ini:/data/gitea/conf/app.ini
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      retries: 10
      start_period: 2m
    ports:
      - 3000:3000
      - 222:22
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256m

  socat:
    # socat allows to run Docker inside Docker in the simplest way, so we
    # can use Docker builder nodes in our CI/CD workflow, and we can also
    # use them to build Docker images
    container_name: cicdlab-socat
    hostname: socat
    image: alpine/socat
    command: tcp-listen:2375,fork,reuseaddr unix-connect:/var/run/docker.sock
    user: root
    volumes:
      - type: bind
        source: //var/run/docker.sock
        target: //var/run/docker.sock

#  monitoringserver:
#    container_name: cicdlab-monitoringserver
#    hostname: monitoringserver
#    image: prom/prometheus
#    volumes:
#      - ./setup:/setup
##      - ./setup/prometheus/prometheus.yml:/etc/prometheus/prom/prometheus.yml
##      - prometheus_data:/etc/prometheus/data
#    ports:
#      - 9090:9090
